import { initLesson } from './config.js';

initLesson('JS Lesson 03', '–ú–æ–¥—É–ª—å 2. –ó–∞–Ω—è—Ç—Ç—è 3. –ú–∞—Å–∏–≤–∏. –ú–µ—Ç–æ–¥–∏ –º–∞—Å–∏–≤—ñ–≤.');

//? ----------------------------------------------- –ø–∏—Ç–∞–Ω–Ω—è –∑ —Ç–∞–±–ª–∏—Ü—ñ-----------------


//?
// –ü—ñ–¥–∫–∞–∂—ñ—Ç—å, –±—É–¥—å-–ª–∞—Å–∫–∞, —á–æ–º—É —Ç–∞–∫ –ø—Ä–∞—Ü—é—î:
// const number = [1, 2, 3, 4, 5,]; number.splice(5,0,6); console.log(number);
// –ê —Ç–∞–∫ –Ω—ñ:
// const number = [1, 2, 3, 4, 5,]; console.log(number.splice(5, 0, 6));

// const numbersA = [1, 2, 3, 4, 5];
// numbersA.splice(5, 0, 6);
// console.log('option A', numbersA);

// const numbersB = [1, 2, 3, 4, 5];
// console.log('option B - splice result', numbersB.splice(5, 0, 6));
// console.log('option B - numbersB itself', numbersB);






//? ----- FOR-IN vs FOR-OF
// const items = ['guitar', 'violin'];
// items.haveStrings = true;

// console.warn('array + for-OF');
// for (const item of items) {
//   console.log(`'${item}' is available in for-OF`);
// }

// console.warn('array + for-IN');
// for (const key in items) {
//   console.log(`'${key}' is available in for-IN`);
// }

// console.warn('string + for-OF');
// for (const item of 'hello') {
//   console.log(`'${item}' is available in for-IN`);
// }

// console.warn('Object + for-OF');
// for (const item of { id: 42 }) {
//   console.log(`'${item}' is available in for-IN`);
// }


// const myArray = [42, true, 'i_am_the_lord', 1111];



//? ----------------------------------------------------------------------------------






//? ## Example 1 - –ë–∞–∑–æ–≤—ñ –æ–ø–µ—Ä–∞—Ü—ñ—ó –∑ –º–∞—Å–∏–≤–æ–º

// 1. –°—Ç–≤–æ—Ä–∏—Ç–∏ –º–∞—Å–∏–≤ –∑ –µ–ª–µ–º–µ–Ω—Ç–∞–º–∏ 'Jazz' –∏ 'Blues'
// const genres = ['Jazz', 'Blues'];

// // 2. –î–æ–¥–∞—Ç–∏ 'Rock' –≤ –∫—ñ–Ω–µ—Ü—å –º–∞—Å–∏–≤—É.
// genres.push('Rock');

// // 3. –í–∏–≤–µ—Å—Ç–∏ –≤ –∫–æ–Ω—Å–æ–ª—å –ø–µ—Ä—à–∏–π –µ–ª–µ–º–µ–Ω—Ç –º–∞—Å–∏–≤–∞ (–Ω–µ –≤–∏–¥–∞–ª—è—é—á–∏ –π–æ–≥–æ)
// console.log('–ø–µ—Ä—à–∏–π –µ–ª–µ–º–µ–Ω—Ç', genres[0]);

// // 4. –í–∏–≤–µ—Å—Ç–∏ –≤ –∫–æ–Ω—Å–æ–ª—å –æ—Å—Ç–∞–Ω–Ω—ñ–π —ç–ª–µ–º–µ–Ω—Ç –º–∞—Å–∏–≤–∞. –ú–∞—î –ø—Ä–∞—Ü—é–≤–∞—Ç–∏ –¥–ª—è –±—É–¥—å-—è–∫–æ—ó –¥–æ–≤–∂–∏–Ω–∏.
// //  genres.length
// const lastElementIndex = genres.length - 1;
// console.log('–æ—Å—Ç–∞–Ω–Ω—ñ–π –µ–ª–µ–º–µ–Ω—Ç', genres[lastElementIndex]);

// // 5. –í–∏–¥–∞–ª–∏—Ç–∏ –∑ –º–∞—Å–∏–≤—É –ø–µ—Ä—à–∏–π –µ–ª–µ–º–µ–Ω—Ç —ñ –≤–∏–≤–µ—Å—Ç–∏ –≤ –∫–æ–Ω—Å–æ–ª—å.
// const firstElement = genres.shift();
// console.log('firstElement', firstElement);

// // 6. –î–æ–¥–∞—Ç–∏ ¬´Country¬ª —ñ ¬´Reggy¬ª –≤ –ø–æ—á–∞—Ç–æ–∫ –º–∞—Å–∏–≤—É (–∑–±–µ—Ä–µ–≥—Ç–∏ –ø–æ—Ä—è–¥–æ–∫).
// genres.unshift('Country', 'Reggy');
// console.log({ genres });











//? ## Example 2 - –ú–∞—Å–∏–≤–∏ —ñ —Å—Ç—Ä–æ–∫–∏
/*
–ù–∞–ø–∏—Å–∞—Ç–∏ —Å–∫—Ä–∏–ø—Ç –¥–ª—è –æ–±—á–∏—Å–ª–µ–Ω–Ω—è –ø–ª–æ—â—ñ –ø—Ä—è–º–æ–∫—É—Ç–Ω–∏–∫–∞ –∑—ñ —Å—Ç–æ—Ä–æ–Ω–∞–º–∏, –¥–æ–≤–∂–∏–Ω—É —è–∫–∏—Ö
–æ—Ç—Ä–∏–º—É—î–º–æ —É –∑–º—ñ–Ω–Ω—ñ–π `sides` —É –≤–∏–≥–ª—è–¥—ñ —Å—Ç—Ä–æ–∫–∏.
–ó–Ω–∞—á–µ–Ω–Ω—è –≥–∞—Ä–∞–Ω—Ç–æ–≤–∞–Ω–æ —Ä–æ–∑–¥—ñ–ª–µ–Ω—ñ –æ–¥–Ω–∏–º –ø—Ä–æ–±—ñ–ª–æ–º
*/

// const sides = '7 10';
// const sidesSeparated = sides.split(' ');

// const area = sidesSeparated[0] * sidesSeparated[1];
// console.log({ sidesSeparated, area });








//? ## Example 3 - –ü–µ—Ä–µ–±–æ—Ä –º–∞—Å–∏–≤—ñ–≤, —É–º–æ–≤–∏
/*
–ù–∞–ø–∏—Å–∞—Ç–∏ —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø–µ—Ä–µ–±–æ—Ä—É –º–∞—Å–∏–≤–∞ `fruits` —Ü–∏–∫–ª–æ–º `for`.
–î–ª—è –∫–æ–∂–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç—É –≤–∏–≤–µ—Å—Ç–∏ –≤ –∫–æ–Ω—Å–æ–ª—å —Å—Ç—Ä–æ–∫—É —Ñ–æ—Ä–º–∞—Ç–∞ `–Ω–æ–º–µ—Ä_–µ–ª–µ–º–µ–Ω—Ç–∞: –∑–Ω–∞—á–µ–Ω–Ω—è_—ç–ª–µ–º–µ–Ω—Ç–∞`.
–ù—É–º–µ—Ä–∞—Ü–∏—ñ—è –º–∞—î –ø–æ—á–∏–Ω–∞—Ç–∏—Å—å –∑ `1`.
*/

// const fruits = ['üçé', 'üçá', 'üçë', 'üçå', 'üçã'];
// const fruitsToIgnore = ['üçå', 'üçã'];

// for (let i = 0; i < fruits.length; i++) {
//   const item = fruits[i];
//   if (fruitsToIgnore.includes(item)) {
//     continue;
//   }

//   console.log(`${i + 1}: ${item}`);
// }


// v2 - next lessons :)
// const filtered = fruits.filter((item) => !fruitsToIgnore.includes(item));
// console.log(filtered);











//? ## Example 4 - –ú–∞—Å–∏–≤–∏ —ñ —Ü–∏–∫–ª–∏
/*
–ù–∞–ø–∏—Å–∞—Ç–∏ —Å–∫—Ä–∏–ø—Ç —â–æ –≤–∏–≤–æ–¥–∏—Ç—å –≤ –∫–æ–Ω—Å–æ–ª—å —ñ–º'—è —ñ —Ç–µ–ª–µ—Ñ–æ–Ω –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤.
–£ –∑–º—ñ–Ω–Ω–∏—Ö `names` —ñ `phones` –∑–±–µ—Ä—ñ–≥–∞—é—Ç—å—Å—è —Å—Ç—Ä–æ–∫–∏ —ñ–º–µ–Ω —ñ —Ç–µ–ª–µ—Ñ–æ–Ω–Ω–∏—Ö –Ω–æ–º–µ—Ä—ñ–≤,
—Ä–æ–∑–¥—ñ–ª–µ–Ω—ñ –∫–æ–º–∞–º–∏.
–ü–æ—Ä—è–¥–æ–∫ —ñ–º–µ–Ω –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î –ø–æ—Ä—è–¥–∫—É –Ω–æ–º–µ—Ä—ñ–≤.
–ö—ñ–ª—å–∫—ñ—Å—Ç—å —ñ–º–µ–Ω –∏ —Ç–µ–ª–µ—Ñ–æ–Ω—ñ–≤ –≥–∞—Ä–∞–Ω—Ç–æ–≤–∞–Ω–æ –æ–¥–Ω–∞–∫–æ–≤–∞.
  - –û–±—Ä–∞—Ç–∏ –∑—Ä—É—á–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç
*/

// const names = 'Jacob,William,Solomon,Nicolas';
// const phones = '89001234567,89001112233,890055566377,890055566300';

// const splitNames = names.split(',');
// const splitPhones = phones.split(',');

// for (let i = 0; i < splitNames.length; i++) {
//   const name = splitNames[i];
//   const phone = splitPhones[i];

//   console.log(`Name: ${name}, phone: ${phone}`);
// }


//  real life case:
// const users = [ { name: 'Jacob', phone: '32265588'} ];










// ? –ú–∞—Å–∏–≤–∏ —ñ —Å—Ç—Ä–æ–∫–∏

//? ## Example 5
/*
–ù–∞–ø–∏—Å–∞—Ç–∏ —Å–∫—Ä–∏–ø—Ç —â–æ –≤–∏–≤–æ–¥–∏—Ç—å –≤ –∫–æ–Ω—Å–æ–ª—å –∑–∞–¥–∞–Ω—É —Ñ—Ä–∞–∑—É –±–µ–∑ –ø–µ—Ä—à–æ–≥–æ —ñ –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ —Å–ª—ñ–≤.
–§—ñ–Ω–∞–ª—å–Ω–∞ —Å—Ç—Ä–æ–∫–∞ –Ω–µ –º–∞—î –ø–æ—á–∏–Ω–∞—Ç–∏—Å—å —á–∏ –∑–∞–∫—ñ–Ω—á—É–≤–∞—Ç–∏—Å—å –ø—Ä–æ–±—ñ–ª–æ–º.
–°–∫—Ä–∏–ø—Ç –º–∞—î –ø—Ä–∞—Ü—é–≤–∞—Ç–∏ –¥–ª—è –±—É–¥—å-—è–∫–æ—ó —Å—Ç—Ä–æ–∫–∏.
*/

// const phrase = 'Welcome to the bright future';

// const words = phrase.split(' ');
// words.pop();
// words.shift();

// const cutPhrase = words.join(' ');
// console.log({ cutPhrase });


// v2 slice
// const firstSpace = phrase.indexOf(' ');
// const lastSpace = phrase.lastIndexOf(' ');

// const cutPhrase = phrase.slice(firstSpace + 1, lastSpace);
// console.log({ cutPhrase });







//? ## Example 6
/*
–ù–∞–ø–∏—Å–∞—Ç–∏ —Å–∫—Ä–∏–ø—Ç —è–∫–∏–π ¬´—Ä–æ–∑–≤–µ—Ä–Ω–µ¬ª —Å—Ç—Ä–æ–∫—É (–∑–≤–æ—Ä–æ—Ç–Ω—ñ–π –ø–æ—Ä—è–¥–æ–∫ –ª—ñ—Ç–µ—Ä) —ñ –≤–∏–≤–µ–¥–µ –≤ –∫–æ–Ω—Å–æ–ª—å.
–¢—Ä–∏ –≤–∞—Ä—ñ–∞–Ω—Ç–∏ - —Ü–∏–∫–ª for (–±–µ–∑ –º–∞—Å–∏–≤—ñ–≤), —Ü–∏–∫–ª for-of + –º–∞—Å–∏–≤–∏, –±–µ–∑ —Ü–∏–∫–ª—ñ–≤?
*/

// const phrase = 'Welcome to the future';

// v1 - for
// let reversed = '';

// for(let i = phrase.length-1; i >= 0; i--) {
//   const item = phrase.charAt(i);
//   // console.log('char', item);

//   reversed += item;
// }


// v2 - for-of
// const chars = phrase.split('');
// console.log(chars);

// const reversedArray = [];

// for (const item of chars) {
//   reversedArray.unshift(item);
// }

// const reversed = reversedArray.join('');

// console.log('reversed:', reversed);


// v3 - reverse!
// const chars = phrase.split('');
// const reversed = chars.reverse().join('');

// console.log('reversed:', reversed);





//? ## Example 7 - –ü–æ—à—É–∫ –µ–ª–µ–º–µ–Ω—Ç–∞
/*
–ù–∞–ø–∏—Å–∞—Ç–∏ —Å–∫—Ä–∏–ø—Ç –ø–æ—à—É–∫—É –Ω–∞–π–º–µ–Ω—à–æ–≥–æ —á–∏—Å–ª–∞ –≤ –º–∞—Å—Å–∏–≤–µ. –ß–∏ —î –≤–∞—Ä—ñ–∞–Ω—Ç–∏?
*/

// const numbers = [2, 17, 94, 1, 23, 37];

// // v1 - Math
// // let min = Math.min(...numbers); // Math.min(2, 17, 94.....)

// // v2 - for-of
// let min = numbers[0];
// for (const number of numbers) {
//   // if (number < min) {
//   //   min = number;
//   // }

//   // min = number < min ? number : min;

//   min = Math.min(number, min);
// }


// console.log(`min is ${min}`, numbers); // –º–∞—î –≤–∏–≤–µ—Å—Ç–∏ 1












//? ## Example 8 - –°–æ—Ä—Ç—É–≤–∞–Ω–Ω—è –º–∞—Å–∏–≤–∞ —Å —Ü–∏–∫–ª–æ–º
/*
–ù–∞–ø–∏—Å–∞—Ç–∏ —Å–∫—Ä–∏–ø—Ç —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è –º–∞—Å–∏–≤—É —Å—Ç—Ä–æ–∫ –≤ –∞–ª—Ñ–∞–≤—ñ—Ç–Ω–æ–º—É –ø–æ—Ä—è–¥–∫—É.
*/

const langs = ['python', 'javascript', 'c++', 'haskel', 'php', 'ruby', 'ada'];
let isSorted;

do {
  console.log('-------- next iteration WHILE');
  isSorted = true; // –ø—Ä–∏–π–º–µ–º–æ, —â–æ –º–∞—Å–∏–≤ –ü–û–¢–ï–ù–¶–Ü–ô–ù–û —Å–æ—Ä—Ç–æ–≤–∞–Ω–∏–π

  // –∞–ª–µ –º–∏ –Ω–µ –º–æ–∂–µ–º–æ –≥–∞—Ä–∞–Ω—Ç—É–≤–∞—Ç–∏ —Ü–µ, —Ç–æ–º—É
  // –≤—Å–µ –æ–¥–Ω–æ –º–∞—î–º–æ –ø—Ä–æ–±—ñ–≥—Ç–∏—Å—å —Ö–æ—á –æ–¥–∏–Ω —Ä–∞–∑ –ø–æ –Ω—å–æ–º—É —ñ –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏:
  for (let i = 0; i < langs.length - 1; i++) {
    console.log(langs);

    const current = langs[i];
    const next = langs[i + 1];

    const isNotSorted = current > next;
    console.log(`comparing: ${current} > ${next}`, isNotSorted);

    // –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è —Å—Ç—Ä–æ–∫ - –ø–æ –ø–æ—Ä—è–¥–∫—É —Å–∏–º–≤–æ–ª–∞ –≤ —Ç–∞–±–ª–∏—Ü—ñ —é–Ω—ñ–∫–æ–¥–∞ (–ø–æ –∞–ª—Ñ–∞–≤—ñ—Ç—É, –∑–¥–µ–±—ñ–ª—å—à–æ–≥–æ)
    if (isNotSorted) {
      console.log('swapping!');
      langs[i] = next;
      langs[i + 1] = current;

      // —è–∫—â–æ –º–∏ —â–æ—Å—å –º—ñ–Ω—è–ª–∏ - —Å—Ç–∞–≤–∏–º–æ –º—ñ—Ç–∫—É, –±–æ –Ω–µ–º–∞—î –≥–∞—Ä–∞–Ω—Ç—ñ–π —â–æ –º–∞—Å–∏–≤ –ó–ê–†–ê–ó –≤–∂–µ –ø–æ–≤–Ω—ñ—Å—Ç—é —Å–æ—Ä—Ç–æ–≤–∞–Ω–∏–π
      // —ñ —Ç–æ–º—É –Ω–∞–º –∑–Ω–∞–¥–æ–±–∏—Ç—å—Å—è —â–µ —Ö–æ—á–∞–± –æ–¥–∏–Ω –ø—Ä–æ–≥—ñ–Ω do-while, —â–æ–± –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —á–∏ –≤—Å–µ –û–ö —Ç–µ–ø–µ—Ä
      isSorted = false;
    }
  }

} while (!isSorted); // —è–∫—â–æ isSorted –≤ –∫—ñ–Ω—Ü—ñ —Ü–∏–∫–ª–∞ WHILE –∑–∞–ª–∏—à–∞—î—Ç—å—Å—è TRUE - –º–∞—Å–∏–≤ –≤—ñ–¥—Å–æ—Ä—Ç–æ–≤–∞–Ω–æ, —Ü–∏–∫–ª –∑–∞–≤–µ—Ä—à—É—î—Ç—å—Å—è

console.log('SORTED!', langs);









